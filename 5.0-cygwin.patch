Cygwin also needs to link against libpython.

--- origsrc/PyQt-gpl-5.0/configure.py	2013-06-16 08:30:57.000000000 -0500
+++ src/PyQt-gpl-5.0/configure.py	2013-08-16 15:23:45.741005700 -0500
@@ -1108,41 +1108,12 @@ def generate_designer_plugin_makefile(ta
     if sys.platform == 'win32':
         link, pysh_lib = get_win32_python_library(target_config)
     else:
-        py_major = target_config.py_version >> 16
-        py_minor = (target_config.py_version >> 8) & 0x0ff
+        link, pysh_lib = get_unix_python_library(target_config)
 
-        # Use distutils to get the additional configuration.
-        from distutils.sysconfig import get_config_vars
-        ducfg = get_config_vars()
-
-        config_args = ducfg.get('CONFIG_ARGS', '')
-
-        if target_config.py_platform == 'darwin':
-            dynamic_pylib = '--enable-framework' in config_args
-
-            # It's probably a Python bug that the library name doesn't
-            # include the ABI information.
-            abi = ''
-        else:
-            dynamic_pylib = '--enable-shared' in config_args
-            abi = getattr(sys, 'abiflags', '')
-
-        if not dynamic_pylib:
-            inform("The Qt Designer plugin was disabled because the Python library is static.")
-            return False
-
-        if glob.glob('%s/lib/libpython%d.%d*' % (ducfg['exec_prefix'], py_major, py_minor)):
-            lib_dir_flag = qmake_quote('-L%s/lib' % ducfg['exec_prefix'])
-        elif glob.glob('%s/libpython%d.%d*' % (ducfg['LIBDIR'], py_major, py_minor)):
-            lib_dir_flag = qmake_quote('-L%s' % ducfg['LIBDIR'])
-        else:
+        if not pysh_lib:
             inform("The Qt Designer plugin was disabled because the Python library couldn't be found.")
             return False
 
-        link = '%s -lpython%d.%d%s' % (lib_dir_flag, py_major, py_minor, abi)
-
-        pysh_lib = ducfg.get('LDLIBRARY', '')
-
     # Create the qmake project file.
     inform("Generating the Qt Designer plugin .pro file...")
 
@@ -1981,18 +1952,25 @@ def generate_module_makefile(target_conf
 
     if not target_config.static:
         debug_suffix = get_win32_debug_suffix(target_config)
-        link, _ = get_win32_python_library(target_config)
+        if target_config.py_platform == 'win32':
+            link, _ = get_win32_python_library(target_config)
+        else:
+            link, _ = get_unix_python_library(target_config)
 
         shared = '''
 win32 {
     PY_MODULE = %s%s.pyd
     target.files = %s%s.pyd
     LIBS += %s
+} else:cygwin-* {
+    PY_MODULE = %s.dll
+    target.files = %s.dll
+    LIBS_PRIVATE += %s
 } else {
     PY_MODULE = %s.so
     target.files = %s.so
 }
-''' % (target_name, debug_suffix, target_name, debug_suffix, link, target_name, target_name)
+''' % (target_name, debug_suffix, target_name, debug_suffix, link, target_name, target_name, link, target_name, target_name)
 
         pro_lines.extend(shared.split('\n'))
 
@@ -2339,6 +2317,39 @@ def get_win32_debug_suffix(target_config
     return '_d' if target_config.debug else ''
 
 
+def get_unix_python_library(target_config):
+    """ Return a tuple of the qmake LIBS flags to link against the Python
+    library, and the name of the DLL itself.  target_config is the target
+    configuration.
+    """
+    py_major, py_minor = get_py_major_minor(target_config)
+
+    # Use distutils to get the additional configuration.
+    from distutils.sysconfig import get_config_vars
+    ducfg = get_config_vars()
+
+    config_args = ducfg.get('CONFIG_ARGS', '')
+
+    if target_config.py_platform == 'darwin':
+        # It's probably a Python bug that the library name doesn't
+        # include the ABI information.
+        abi = ''
+    else:
+        abi = getattr(sys, 'abiflags', '')
+
+    if glob.glob('%s/lib/libpython%d.%d*' % (ducfg['exec_prefix'], py_major, py_minor)):
+        lib_dir_flag = qmake_quote('-L%s/lib' % ducfg['exec_prefix'])
+    elif glob.glob('%s/libpython%d.%d*' % (ducfg['LIBDIR'], py_major, py_minor)):
+        lib_dir_flag = qmake_quote('-L%s' % ducfg['LIBDIR'])
+    else:
+        lib_dir_flag = ''
+
+    link = '%s -lpython%d.%d%s' % (lib_dir_flag, py_major, py_minor, abi)
+    pysh_lib = ducfg.get('DLLLIBRARY', '')
+
+    return link, pysh_lib
+
+
 def get_py_major_minor(target_config):
     """ Return a tuple of the major and minor Python version numbers.
     target_config is the target configuration.
